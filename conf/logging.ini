# 都不需要用双引号，尤其是路径和字符串。这里默认是字符串
# 主要分为两部分，注意单复数（小坑）：
# 一、配置段三个 [loggers] 、 [handlers] 、[formatters]
#   1. 只有一个key，就是keys
#   2. loggers : 配置logger信息。必须包含一个名字叫做root的logger，当使用无参函数logging.getLogger()时，默认返回root这个logger，
#                其他自定义logger可以通过 logging.getLogger("fileLogger") 方式进行调用
#   3. handlers: 定义声明handlers信息。常用的handlers包括 StreamHandler（仅将日志输出到控制台）、FileHandler（将日志信息输出保存到文件）、
#                RotaRotatingFileHandler（将日志输出保存到文件中，并设置单个日志文件的大小和日志文件个数）
#   4. formatter : 设置日志格式
#二、具体配置
#   logger_xxx : 对loggers中声明的logger进行逐个配置，且要一一对应
#   handler_xxx : 对handlers中声明的handler进行逐个配置，且要一一对应
#   formatter_xxx : 对声明的formatterjinx进行配置


# 调用方式
# logging.config.fileConfig("logging.ini") (本框架将会通过读取server.ini配置来获得logging.ini的文件名)
# # 输出日志到控制台,获取的是root对应的logger
# console_logger = logging.getLogger()
# # 输出日志到单个文件和控制台
# file_logger = logging.getLogger(name="get_worklog")  【get_worklog在[logger_worklog]中的qualname=get_working】
# # rotatingFileLogger中额consoleHandler输出到控制台，rotatingHandler输出日志到文件
# rotating_logger = logging.getLogger(name="")

# 注意
# 进行以上配置后，在项目中需要进行日志输出的地方通过logging.getLogger()方式就可以获取到du应的logger，然后就可以使用logger.info("xxx")进行日志输出了。
# 使用这种方式配置日志，一定要在项目的入口函数中就调用 logging.config.fileConfig("logging.ini")函数，因为 logging.ini 文件中，在handler中配置的是日志文件的相对地址，
# 如果在其他代码文件中进行调用，由于相对地址的原因，将导致日志文件会出现在意想不到的位置。


[loggers]
keys=root,worklog,translog,sqllog

[handlers]
keys=console,worklog,translog,sqllog

[formatters]
keys=console,worklog,translog,sqllog


# ###### logger配置 ######
[logger_root]
level=DEBUG
handlers=console

[logger_worklog]
level=DEBUG
# 这样配置，worklog就同时配置了两个handler。其中,worklog输出到文件，console输出到控制台
handlers=worklog,console
propagate=0
qualname=get_worklog

[logger_translog]
level=INFO
handlers=translog
propagate=0
qualname=get_translog

[logger_sqllog]
level=INFO
handlers=sqllog
propagate=0
qualname=get_sqllog

# ###### handler 配置 ######
[handler_console]
class=StreamHandler
level=WARNING
formatter=console
args=(sys.stdout,)

[handler_worklog]
class=handlers.TimedRotatingFileHandler
level=DEBUG
formatter=worklog
args=('./logs/worklog.log', 'midnight', 1, 5, 'utf8',)

[handler_translog]
class=handlers.TimedRotatingFileHandler
level=INFO
formatter=translog
args=('./logs/translog.log', 'midnight', 1, 5, 'utf8',)

[handler_sqllog]
class=handlers.TimedRotatingFileHandler
level=INFO
formatter=sqllog
args=('./logs/sqllog.log', 'midnight', 1, 5, 'utf8',)

# ###### formaters 配置 ######
[formatter_console]
format=%(asctime)s [%(levelname)s-%(name)s] -- %(message)s
datefmt=%I:%M:%S
class=logging.Formatter

[formatter_worklog]
format=[%(levelname)s-%(asctime)s] -- %(message)s
datefmt=%I:%M:%S
class=logging.Formatter

[formatter_translog]
format=%(message)s
datefmt=%I:%M:%S
class=logging.Formatter

[formatter_sqllog]
format=%(message)s
datefmt=%I:%M:%S
class=logging.Formatter
